#!/bin/bash
# Should be runned by systemd with network dependency and fail to mail

LOCKFILE="/var/run/$(basename "$0").lock"
INTERVAL="15m"
MAX_FAIL_SCORE=3
LOCAL_DIR=$(dirname "$(readlink -f "$0")")
USAGE="USAGE: $(basename "$0") start|stop|reload conf_file."

declare -A CONTAINERS_FAIL

safe_exit() {
    echo "$1"
    rm -f "$LOCKFILE"
    exit "$2"
}

send_mail() {
    message=$(journalctl -b CONTAINER_NAME="$1" | tail)
    message2=$(journalctl -b -u docker_manager | tail)
    echo -e "Subject:$1 Failure $2\n$message\n\n$message2" | msmtp "$FAIL_MAIL" && echo "Mail sended to $FAIL_MAIL."
}

refresh_score() {
    # $1 cont name / $2 score
    if docker inspect -f '{{.State.Health.Status}}' "$1" 2>/dev/null | grep -P "^starting$" &>/dev/null; then
        echo "$2"
    elif docker inspect -f '{{.State.Health.Status}}' "$1" 2>/dev/null | grep -P "^unhealthy$" &>/dev/null; then
        if [ "$2" -lt $MAX_FAIL_SCORE ]; then
            echo $(($2 + 1))
        else
            echo "$2"
        fi
    elif ! docker inspect -f '{{.State.Status}}' "$1" 2>/dev/null | grep -P "^running$" &>/dev/null; then
        if [ "$2" -lt $MAX_FAIL_SCORE ]; then
            echo $(($2 + 1))
        else
            echo "$2"
        fi
    else
        echo 0
    fi
}

terminator() {
    kill -9 "$1" 1>/dev/null
    [ -f "$LOCKFILE" ] && ps -p "$(cat "$LOCKFILE")" >/dev/null && echo "Can't kill $1, exiting." && exit 1
}

error_handler() {
    # $1 cont name / $2 score
    echo "$1 failed ($2)."
    [ "$2" -ne  "1" ] && send_mail "$1" "$2"
    cd "$LOCAL_DIR" && cd ../..
    docker stop "$1" &>/dev/null && docker wait "$1" 1>/dev/null && echo "$1 stopped."
    "$1"/docker-run.sh
}

build_container_fails() {
    for cont in $CONTAINERS; do
        CONTAINERS_FAIL["$cont"]=0
    done
}

check_loop() {
    while true; do
        sleep $INTERVAL
        for cont in $CONTAINERS; do
            # if check pass : TMP / reset to 0
            # if not maxfailscore : TMP / increment fail value -> will try to repair
            # if maxfailscore : TMP / same value -> no repair
            TMP=$(refresh_score "$cont" "${CONTAINERS_FAIL[$cont]}")
            [ "$TMP" -gt "${CONTAINERS_FAIL[$cont]}" ] && error_handler "$cont" "$TMP"
            CONTAINERS_FAIL[$cont]=$TMP
        done
    done
}

docker_start() {
    cd "$LOCAL_DIR" && cd ../..
    for cont in $CONTAINERS; do
        "$cont"/docker-run.sh
    done
}

docker_stop() {
    for cont in $CONTAINERS; do
        docker stop "$cont" 1>/dev/null && echo "$cont stopped."
    done
}

start() {
    docker_start
    check_loop
}

stop() {
    docker_stop
}

reload() {
    stop
    start
}

boot_check() {
    [ "$(id -u)" -ne 0 ] && echo "Must be run as root." && exit 1
    if ! msmtp --version &>/dev/null; then
        echo "msmtp not found, exiting."
        exit 1
    fi
    [ "$#" -ne 2 ] && echo "$USAGE" && exit 1
    [ -f "$LOCKFILE" ] && ps -p "$(cat "$LOCKFILE")" >/dev/null && echo "$(basename "$0") is already running, restarting." && terminator "$(cat "$LOCKFILE")"
    echo $$ >"$LOCKFILE"
}

main() {
    cd "$LOCAL_DIR" || safe_exit "cd failed" 0
    # shellcheck source=/dev/null
    source "$2"
    build_container_fails
    case $1 in
        start) start ;;
        reload) reload ;;
        stop) stop ;;
        *) echo "$USAGE" ;;
    esac
}

trap 'safe_exit "KILL catched, exiting." 0' SIGINT
boot_check "$@"
main "$@"
safe_exit "$(basename "$0") exiting." 0
